<?php

namespace Zenweb\Aventure\ParcBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PriceRepository extends EntityRepository
{
    public function getPricesByTimeSlot($idTimeSlot)
    {
        return $this->createQueryBuilder("p")
            ->innerJoin("ZenwebAventureParcBundle:TimeSlot", "ts", "WITH", "ts.activity = p.activity")
            ->where("ts.id=:idTs")
            ->setParameter("idTs", $idTimeSlot)
            ->getQuery()->getArrayResult();
    }

    /**
     * @param $groupsId
     * @param $idTimeSlot
     * @param $qty
     *
     * @return array
     */

    public function getAvailablePrices($groupsId, $idTimeSlot, $qty)
    {
        /**
         * Subquery to get the min of each tier price.
         */
        $qb2 = $this->_em->createQueryBuilder();
        $qb2->select($qb2->expr()->max('tpmax.qty'))
            ->from('ZenwebAventureParcBundle:TierPrice', 'tpmax')
            ->where('tpmax.qty<=:qty')
            ->setParameter("qty", $qty);
        $qb2->getQuery()->getSQL();

        $qb = $this->createQueryBuilder("p");
        return $qb->select('p', 'tp')
            ->join('p.groups', 'g')
            ->join("ZenwebAventureParcBundle:TimeSlot", "ts", "WITH", "ts.activity = p.activity")
            ->leftJoin('p.TierPrices', 'tp', 'WITH', $qb->expr()->andX($qb->expr()->lte('tp.qty', ':qty'), $qb->expr()->eq('tp.qty', "($qb2)")))
            ->where($qb->expr()->in('g.id', $groupsId))
            ->andWhere("ts.id=:idTs")
            ->setParameter("idTs", $idTimeSlot)
            ->setParameter("qty", $qty)
            ->getQuery()->getArrayResult();
    }

    public function getMinPrice($price, $qty)
    {
        $price=1;
        $qb2 = $this->_em->createQueryBuilder();
        $qb2->select($qb2->expr()->max('tpmax.qty'))
            ->from('ZenwebAventureParcBundle:TierPrice', 'tpmax')
            ->where('tpmax.qty<=:qty')
            ->setParameter("qty", $qty);
        $qb2->getQuery()->getSQL();

        $qb = $this->createQueryBuilder("p");
        return $qb->select('p', 'tp')
            ->leftJoin('p.TierPrices', 'tp', 'WITH', $qb->expr()->andX($qb->expr()->lte('tp.qty', ':qty'), $qb->expr()->eq('tp.qty', "($qb2)")))
            ->where('p.id=:price')
            ->setParameter("price", $price)
            ->setParameter("qty", $qty)
            ->getQuery()->getOneOrNullResult();
    }

}
